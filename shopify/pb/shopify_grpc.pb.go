// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: shopify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopifyService_GetAuthorizationURL_FullMethodName        = "/pb.ShopifyService/GetAuthorizationURL"
	ShopifyService_ExchangeAccessToken_FullMethodName        = "/pb.ShopifyService/ExchangeAccessToken"
	ShopifyService_GetOrdersForShopAndAccount_FullMethodName = "/pb.ShopifyService/GetOrdersForShopAndAccount"
	ShopifyService_SyncOrders_FullMethodName                 = "/pb.ShopifyService/SyncOrders"
	ShopifyService_GetOrdersForAccount_FullMethodName        = "/pb.ShopifyService/GetOrdersForAccount"
	ShopifyService_GetOrder_FullMethodName                   = "/pb.ShopifyService/GetOrder"
)

// ShopifyServiceClient is the client API for ShopifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopifyServiceClient interface {
	GetAuthorizationURL(ctx context.Context, in *GetAuthorizationURLRequest, opts ...grpc.CallOption) (*GetAuthorizationURLResponse, error)
	ExchangeAccessToken(ctx context.Context, in *ExchangeAccessTokenRequest, opts ...grpc.CallOption) (*ExchangeAccessTokenResponse, error)
	GetOrdersForShopAndAccount(ctx context.Context, in *GetOrdersForShopAndAccountRequest, opts ...grpc.CallOption) (*GetOrdersForShopAndAccountResponse, error)
	SyncOrders(ctx context.Context, in *SyncOrderRequest, opts ...grpc.CallOption) (*SyncOrderResponse, error)
	GetOrdersForAccount(ctx context.Context, in *GetOrdersForAccountRequest, opts ...grpc.CallOption) (*GetOrdersForAccountResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
}

type shopifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopifyServiceClient(cc grpc.ClientConnInterface) ShopifyServiceClient {
	return &shopifyServiceClient{cc}
}

func (c *shopifyServiceClient) GetAuthorizationURL(ctx context.Context, in *GetAuthorizationURLRequest, opts ...grpc.CallOption) (*GetAuthorizationURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorizationURLResponse)
	err := c.cc.Invoke(ctx, ShopifyService_GetAuthorizationURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) ExchangeAccessToken(ctx context.Context, in *ExchangeAccessTokenRequest, opts ...grpc.CallOption) (*ExchangeAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangeAccessTokenResponse)
	err := c.cc.Invoke(ctx, ShopifyService_ExchangeAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) GetOrdersForShopAndAccount(ctx context.Context, in *GetOrdersForShopAndAccountRequest, opts ...grpc.CallOption) (*GetOrdersForShopAndAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersForShopAndAccountResponse)
	err := c.cc.Invoke(ctx, ShopifyService_GetOrdersForShopAndAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) SyncOrders(ctx context.Context, in *SyncOrderRequest, opts ...grpc.CallOption) (*SyncOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOrderResponse)
	err := c.cc.Invoke(ctx, ShopifyService_SyncOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) GetOrdersForAccount(ctx context.Context, in *GetOrdersForAccountRequest, opts ...grpc.CallOption) (*GetOrdersForAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersForAccountResponse)
	err := c.cc.Invoke(ctx, ShopifyService_GetOrdersForAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, ShopifyService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopifyServiceServer is the server API for ShopifyService service.
// All implementations must embed UnimplementedShopifyServiceServer
// for forward compatibility.
type ShopifyServiceServer interface {
	GetAuthorizationURL(context.Context, *GetAuthorizationURLRequest) (*GetAuthorizationURLResponse, error)
	ExchangeAccessToken(context.Context, *ExchangeAccessTokenRequest) (*ExchangeAccessTokenResponse, error)
	GetOrdersForShopAndAccount(context.Context, *GetOrdersForShopAndAccountRequest) (*GetOrdersForShopAndAccountResponse, error)
	SyncOrders(context.Context, *SyncOrderRequest) (*SyncOrderResponse, error)
	GetOrdersForAccount(context.Context, *GetOrdersForAccountRequest) (*GetOrdersForAccountResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	mustEmbedUnimplementedShopifyServiceServer()
}

// UnimplementedShopifyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopifyServiceServer struct{}

func (UnimplementedShopifyServiceServer) GetAuthorizationURL(context.Context, *GetAuthorizationURLRequest) (*GetAuthorizationURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationURL not implemented")
}
func (UnimplementedShopifyServiceServer) ExchangeAccessToken(context.Context, *ExchangeAccessTokenRequest) (*ExchangeAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAccessToken not implemented")
}
func (UnimplementedShopifyServiceServer) GetOrdersForShopAndAccount(context.Context, *GetOrdersForShopAndAccountRequest) (*GetOrdersForShopAndAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForShopAndAccount not implemented")
}
func (UnimplementedShopifyServiceServer) SyncOrders(context.Context, *SyncOrderRequest) (*SyncOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOrders not implemented")
}
func (UnimplementedShopifyServiceServer) GetOrdersForAccount(context.Context, *GetOrdersForAccountRequest) (*GetOrdersForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForAccount not implemented")
}
func (UnimplementedShopifyServiceServer) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedShopifyServiceServer) mustEmbedUnimplementedShopifyServiceServer() {}
func (UnimplementedShopifyServiceServer) testEmbeddedByValue()                        {}

// UnsafeShopifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopifyServiceServer will
// result in compilation errors.
type UnsafeShopifyServiceServer interface {
	mustEmbedUnimplementedShopifyServiceServer()
}

func RegisterShopifyServiceServer(s grpc.ServiceRegistrar, srv ShopifyServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopifyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopifyService_ServiceDesc, srv)
}

func _ShopifyService_GetAuthorizationURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetAuthorizationURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetAuthorizationURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetAuthorizationURL(ctx, req.(*GetAuthorizationURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_ExchangeAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).ExchangeAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_ExchangeAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).ExchangeAccessToken(ctx, req.(*ExchangeAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_GetOrdersForShopAndAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersForShopAndAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetOrdersForShopAndAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetOrdersForShopAndAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetOrdersForShopAndAccount(ctx, req.(*GetOrdersForShopAndAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_SyncOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).SyncOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_SyncOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).SyncOrders(ctx, req.(*SyncOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_GetOrdersForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetOrdersForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetOrdersForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetOrdersForAccount(ctx, req.(*GetOrdersForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopifyService_ServiceDesc is the grpc.ServiceDesc for ShopifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShopifyService",
	HandlerType: (*ShopifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorizationURL",
			Handler:    _ShopifyService_GetAuthorizationURL_Handler,
		},
		{
			MethodName: "ExchangeAccessToken",
			Handler:    _ShopifyService_ExchangeAccessToken_Handler,
		},
		{
			MethodName: "GetOrdersForShopAndAccount",
			Handler:    _ShopifyService_GetOrdersForShopAndAccount_Handler,
		},
		{
			MethodName: "SyncOrders",
			Handler:    _ShopifyService_SyncOrders_Handler,
		},
		{
			MethodName: "GetOrdersForAccount",
			Handler:    _ShopifyService_GetOrdersForAccount_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ShopifyService_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopify.proto",
}
